1
00:00:04.2 --> 00:00:05.2
Hello.

2
00:00:05.2 --> 00:00:08.6
In this video we are going to see how we can extract numbers

3
00:00:08.6 --> 00:00:10.3
in between pipe characters.

4
00:00:10.6 --> 00:00:15.7
We'll also explore ways to trim these numbers while extracting

5
00:00:15.7 --> 00:00:19.5
them. In this line you can see that there are five matches

6
00:00:19.5 --> 00:00:25.9
"1", "2", "3", "4", "5". In order to extract them, we can start with matching

7
00:00:26.2 --> 00:00:28.8
pipes. In order to match a pipe,

8
00:00:29.0 --> 00:00:32.5
we need to escape it because a pipe is a special character

9
00:00:32.6 --> 00:00:34.6
and denotes an alternation operator.

10
00:00:34.7 --> 00:00:37.2
In order to match a literal pipe,

11
00:00:37.5 --> 00:00:40.2
we use the backslash in front of the pipe symbol.

12
00:00:40.5 --> 00:00:45.6
Next we need to match the whitespaces. "\s*"

13
00:00:45.6 --> 00:00:47.8
matches zero or more whitespaces.

14
00:00:48.7 --> 00:00:54.7
Now, we match one more digits using "\d+". Then, we want to make

15
00:00:54.7 --> 00:00:58.3
sure there is a pipe character right after the digits.

16
00:00:59.2 --> 00:01:04.8
So we use a "\s*\|".

17
00:01:05.3 --> 00:01:09.6
Now you can see that we have fewer matches than we expect.

18
00:01:09.8 --> 00:01:14.8
That happened because these matches are consecutive.

19
00:01:15.2 --> 00:01:19.2
When we have consecutive matches, we need to use lookarounds.

20
00:01:19.5 --> 00:01:22.0
In order to make it work,

21
00:01:22.0 --> 00:01:25.1
we need to use a positive lookahead here.

22
00:01:25.8 --> 00:01:28.7
Now we see that we've got five matches.

23
00:01:28.8 --> 00:01:32.3
However, you can see that we've included the initial pipe

24
00:01:32.3 --> 00:01:35.5
and spaces into the match. In order to exclude them,

25
00:01:35.5 --> 00:01:38.1
the best way is to use a capturing group.

26
00:01:39.7 --> 00:01:43.5
Why? Once you capture these numbers, you can easily extract them

27
00:01:43.5 --> 00:01:46.7
by accessing their Group 1 values using your code.

28
00:01:47.1 --> 00:01:50.4
There are also ways to exclude those characters using plain

29
00:01:50.4 --> 00:01:51.1
regex means.

30
00:01:51.4 --> 00:01:57.4
If you are using PCRE or Onigmo, you can use the "\K" operator.

31
00:02:00.8 --> 00:02:06.0
If you are not using PCRE or Onigmo and, for example, you are using

32
00:02:06.1 --> 00:02:11.0
Java, then you can use a constrained-width lookbehind.

33
00:02:12.0 --> 00:02:17.7
This is a positive lookbehind that matches a location that

34
00:02:17.7 --> 00:02:20.9
is immediately preceeded with a pipe followed with one

35
00:02:20.9 --> 00:02:25.2
to ten whitespaces and you can see we've got our expected

36
00:02:25.3 --> 00:02:29.9
matches. This will also work in R with the "stringr" package.

37
00:02:30.2 --> 00:02:33.8
It will also work in Swift that also uses an ICU regex flavor.

38
00:02:34.3 --> 00:02:37.1
So, you can see the explanation of the pattern

39
00:02:37.2 --> 00:02:37.4
on the right,

40
00:02:37.4 --> 00:02:39.9
you can read more about the constructs used in this video

41
00:02:40.3 --> 00:02:43.3
by following the links in the FURTHER LINKS section, and if

42
00:02:43.3 --> 00:02:46.0
you liked my video, please click "Like" and subscribe to my channel

43
00:02:46.0 --> 00:02:46.9
if you haven't done it yet.

44
00:02:46.9 --> 00:02:49.2
Thank you for watching and happy regexing.
