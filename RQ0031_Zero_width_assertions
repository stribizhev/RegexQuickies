1
00:00:04.9 --> 00:00:06.2
Hello, in this video, we are going to

2
00:00:06.2 --> 00:00:09.3
speak about zero-width assertions in regular expressions.

3
00:00:09.5 --> 00:00:11.5
Surely, you have already heard of

4
00:00:11.5 --> 00:00:14.2
lookarounds, word boundaries or anchors.

5
00:00:14.6 --> 00:00:17.7
These are all examples of zero-width assertions.

6
00:00:18.4 --> 00:00:21.0
Why are they called zero-width assertions?

7
00:00:21.3 --> 00:00:24.3
Such constructs can match empty strings.

8
00:00:25.5 --> 00:00:31.0
Why are they "assertions"? They assert or require the presence

9
00:00:31.1 --> 00:00:35.2
or absence of some specific characters either on the right

10
00:00:35.3 --> 00:00:38.0
or on the left of the current location.

11
00:00:38.2 --> 00:00:40.3
Let's take anchors, for example.

12
00:00:40.4 --> 00:00:45.5
They usually match either start or end of a string or a line.

13
00:00:45.7 --> 00:00:51.3
Word boundaries are also considered to be zero-width assertions.

14
00:00:51.5 --> 00:00:55.6
Word boundaries usually match locations at the beginning

15
00:00:55.7 --> 00:00:57.4
or at the end of a word.

16
00:00:58.5 --> 00:01:03.4
Lookaheads usually require some text to be present or

17
00:01:03.4 --> 00:01:07.5
absent immediately to the right of the current location and

18
00:01:07.6 --> 00:01:12.9
lookbehinds mean that there should be some pattern immediately

19
00:01:12.9 --> 00:01:15.2
to the left of the current location.

20
00:01:15.7 --> 00:01:17.6
Let's have a look at some examples.

21
00:01:17.7 --> 00:01:22.5
For example, we want to match "he" as a whole line.

22
00:01:22.5 --> 00:01:26.5
Here, we're using the "m" option,

23
00:01:26.6 --> 00:01:29.4
"m" flag, which stands for multiline.

24
00:01:29.5 --> 00:01:33.4
That's why the "^" caret symbol and the "$" dollar symbol

25
00:01:33.5 --> 00:01:37.6
match the start and end of any line correspondingly.

26
00:01:38.6 --> 00:01:42.5
So, "^he$" matches a whole line "he",

27
00:01:42.5 --> 00:01:45.3
and you can see the match here.

28
00:01:46.4 --> 00:01:50.8
If we want to match "he" as a whole word,

29
00:01:50.8 --> 00:01:57.3
we usually use word boundaries and we match any "he" occurrence

30
00:01:57.3 --> 00:02:02.1
that is neither preceded nor followed with a word character.

31
00:02:03.0 --> 00:02:06.6
Look, we've got a match in "he",

32
00:02:06.6 --> 00:02:09.6
but we don't have any match in the word "The".

33
00:02:10.6 --> 00:02:14.1
Now let's see how unambiguous string boundaries work.

34
00:02:15.4 --> 00:02:19.2
If we use this example as a regular expression,

35
00:02:19.2 --> 00:02:23.0
we see no match, but we just need to remove all

36
00:02:23.1 --> 00:02:27.9
text in this window and use "he" as the only

37
00:02:28.5 --> 00:02:31.6
text in this field, and we see there is a match.

38
00:02:31.6 --> 00:02:36.9
And now let's see how positive lookarounds work.

39
00:02:37.2 --> 00:02:43.0
So this pattern matches any "i" character that is

40
00:02:43.1 --> 00:02:48.0
immediately followed with the letter "s" that is followed

41
00:02:48.0 --> 00:02:50.7
with the word boundary location, and that's why we've

42
00:02:50.7 --> 00:02:55.7
got a match in "is" and we won't have

43
00:02:55.8 --> 00:02:58.9
a match in "ish", for example.

44
00:02:59.4 --> 00:03:01.9
Now, let's check a negative lookahead.

45
00:03:03.8 --> 00:03:08.8
This expression matches "h" that is not immediately followed with "at",

46
00:03:08.8 --> 00:03:16.8
so it won't match "h" in "hat", but it will match "h" in "The", in "he", etc.

47
00:03:16.9 --> 00:03:19.8
Now, let's see how positive lookbehinds work.

48
00:03:20.4 --> 00:03:23.7
For example, this pattern matches any "h"

49
00:03:23.7 --> 00:03:30.0
that is preceded — immediately preceded — with any ASCII letter.

50
00:03:30.2 --> 00:03:33.1
So, it matches in the word "The", but

51
00:03:33.2 --> 00:03:35.7
it's not matched in the word "hat" because

52
00:03:35.8 --> 00:03:38.9
it's immediately preceded with a whitespace.

53
00:03:40.7 --> 00:03:43.6
Now, let's see how negative lookbehinds work.

54
00:03:45.1 --> 00:03:48.9
So, this example matches any "h"

55
00:03:48.9 --> 00:03:53.6
that is not immediately preceded with a non-whitespace character.

56
00:03:53.9 --> 00:03:56.8
It just means that there must be a whitespace

57
00:03:56.8 --> 00:04:01.0
or start of string immediately before "h".

58
00:04:01.5 --> 00:04:04.3
That's why we match "h" here.

59
00:04:04.4 --> 00:04:07.1
There is a newline (LF, "\n") right before it.

60
00:04:07.2 --> 00:04:10.7
We match this "h" in "hat" because there's a space

61
00:04:10.8 --> 00:04:16.0
right before "hat", and we don't match "h" in "chat"

62
00:04:16.1 --> 00:04:21.7
because here "h" is immediately preceded with a word character,

63
00:04:22.0 --> 00:04:24.0
and this is NOT a whitespace character.

64
00:04:25.2 --> 00:04:27.7
So, you can see that with zero-width assertions,

65
00:04:27.9 --> 00:04:31.7
we impose some specific context on the match.

66
00:04:33.0 --> 00:04:36.2
This is very-very helpful, especially when you want

67
00:04:36.2 --> 00:04:40.1
to fetch some specific text without the text

68
00:04:40.2 --> 00:04:43.5
that was matched within the zero-width assertion.

69
00:04:44.1 --> 00:04:47.3
When we speak about zero-width assertions,

70
00:04:47.3 --> 00:04:51.0
we also should understand the term "consuming".

71
00:04:51.3 --> 00:04:54.9
Zero-width assertions are non-consuming patterns.

72
00:04:55.0 --> 00:04:58.3
When we say that a pattern is non-consuming, we mean

73
00:04:58.3 --> 00:05:01.8
that the text matched by this pattern is not added

74
00:05:01.8 --> 00:05:06.4
to the overall match memory buffer, and this text is

75
00:05:06.4 --> 00:05:10.4
not returned as part of the match value.

76
00:05:11.0 --> 00:05:14.3
Also, non-consuming patterns keep the regex

77
00:05:14.4 --> 00:05:17.6
index at the location where it was

78
00:05:17.6 --> 00:05:21.1
before trying the zero-width assertion pattern.

79
00:05:21.2 --> 00:05:23.5
And it also means that if you chain several

80
00:05:23.5 --> 00:05:26.7
zero-width assertions at the same location in the pattern,

81
00:05:26.8 --> 00:05:30.6
they will be executed at the same location inside the string.

82
00:05:31.1 --> 00:05:34.6
They will be executed at the current location one by one.

83
00:05:35.0 --> 00:05:37.8
This is why common password

84
00:05:37.9 --> 00:05:40.5
checking patterns look like this.

85
00:05:41.9 --> 00:05:45.2
We are requiring at least one digit,

86
00:05:45.3 --> 00:05:50.6
we also require at least one letter, and

87
00:05:50.7 --> 00:05:56.2
we may also require some special characters of your choice.

88
00:05:57.1 --> 00:06:02.3
Just type any and then we can require

89
00:06:02.3 --> 00:06:06.1
the length to be at least eight characters, for example.

90
00:06:06.3 --> 00:06:11.9
And this is a common example of password checking regex,

91
00:06:11.9 --> 00:06:15.2
and you see three separate lookaheads

92
00:06:15.3 --> 00:06:18.3
that are chained at the beginning of the string.

93
00:06:18.8 --> 00:06:21.6
Well, zero-width assertions are a very

94
00:06:21.7 --> 00:06:25.1
common regular expression topic, and you usually

95
00:06:25.3 --> 00:06:27.4
see them in many places.

96
00:06:28.1 --> 00:06:31.2
You can read more about zero-width assertions

97
00:06:31.2 --> 00:06:34.8
if you follow the links in the FURTHER LINKS section.

98
00:06:34.8 --> 00:06:37.5
If you liked my video, please click "Like" and subscribe to my channel,

99
00:06:37.5 --> 00:06:38.8
if you haven't done it yet.

100
00:06:38.9 --> 00:06:40.9
Thank you for watching and happy regexing!
