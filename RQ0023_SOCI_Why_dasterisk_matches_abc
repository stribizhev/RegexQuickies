1
00:00:03.9 --> 00:00:07.0
Hello, in this regex quickie, we're going to speak about

2
00:00:07.0 --> 00:00:09.1
a very frequent issue that StackOverflow

3
00:00:09.1 --> 00:00:12.9
users come across very frequently. Trying to extract a number

4
00:00:12.9 --> 00:00:13.5
from a string

5
00:00:13.9 --> 00:00:17.2
people often use the "\d*" pattern.

6
00:00:17.3 --> 00:00:22.8
As you can see, this pattern matches a digit zero or more

7
00:00:22.8 --> 00:00:28.6
times. "Zero or more times" means that this pattern can match an empty string.

8
00:00:28.6 --> 00:00:31.3
When does it match an empty string?

9
00:00:31.4 --> 00:00:32.1
Have a look.

10
00:00:32.1 --> 00:00:39.7
This "abc" string contains three letters and empty spaces before

11
00:00:39.7 --> 00:00:44.4
each letter and an empty space after the last letter.

12
00:00:44.7 --> 00:00:47.8
Regex engines usually parse the string from left to right.

13
00:00:47.9 --> 00:00:51.3
In this case, it also does the same.

14
00:00:52.3 --> 00:00:58.0
As you can see, there is no global flag in this regular expression,

15
00:00:58.3 --> 00:01:02.2
so it means that we are matching the first occurrence of

16
00:01:02.2 --> 00:01:03.3
the pattern in a string.

17
00:01:03.4 --> 00:01:07.4
And if you have a look, we actually match the beginning of

18
00:01:07.5 --> 00:01:11.5
the string where there is no digits, but there is an empty

19
00:01:11.5 --> 00:01:16.2
string just before "a", a non-matching character. "\d" matches

20
00:01:16.2 --> 00:01:19.8
digits â€” there's no digits, but we don't have to extract

21
00:01:19.8 --> 00:01:24.2
any digit in this case because of this asterisk, zero or more

22
00:01:24.3 --> 00:01:25.3
times quantifier.

23
00:01:26.0 --> 00:01:31.5
Even if we have "abc12", this pattern will still match

24
00:01:31.5 --> 00:01:33.8
the empty string at the beginning of this string.

25
00:01:34.0 --> 00:01:35.9
What can we do in this situation?

26
00:01:36.2 --> 00:01:41.1
Of course, the best solution is to match one or more digits,

27
00:01:41.5 --> 00:01:42.9
not zero or more.

28
00:01:43.0 --> 00:01:48.4
Even if you use "\d*" you can turn on the global flag

29
00:01:49.1 --> 00:01:52.9
and you will get all matches in the string, and one of those

30
00:01:52.9 --> 00:01:56.5
matches will be the digits at the end of the string.

31
00:01:56.7 --> 00:02:00.8
This is not recommended because if you do not expect empty

32
00:02:00.8 --> 00:02:04.2
strings to appear in your results, you should match a pattern

33
00:02:04.3 --> 00:02:06.3
that doesn't match empty strings.

34
00:02:06.5 --> 00:02:09.8
The rule of thumb is to use a pattern that doesn't match

35
00:02:09.8 --> 00:02:13.3
empty strings if you do not expect empty strings in your output.

36
00:02:13.3 --> 00:02:16.1
Now, let's see how we can reproduce it in code.

37
00:02:16.1 --> 00:02:21.7
If you use Python and the 're' library, we can try running

38
00:02:21.7 --> 00:02:26.3
this regex against the "abc123" string.

39
00:02:26.3 --> 00:02:31.8
"\d*", when used with the 're.search' function, will attempt

40
00:02:04.3 --> 00:02:06.3
that doesn't match empty strings.

41
00:02:06.5 --> 00:02:09.8
The rule of thumb is to use a pattern that doesn't match

42
00:02:09.8 --> 00:02:13.3
empty strings if you do not expect empty strings in your output.

43
00:02:13.3 --> 00:02:16.1
Now, let's see how we can reproduce it in code.

44
00:02:16.1 --> 00:02:21.7
If you use Python and the 're' library, we can try running

45
00:02:21.7 --> 00:02:26.3
this regex against the "abc123" string.

46
00:02:26.3 --> 00:02:31.8
"\d*", when used with the 're.search' function, will attempt

47
00:02:31.8 --> 00:02:37.1
to fetch the first occurrence in the string, and the first

48
00:02:37.1 --> 00:02:41.3
occurrence, as we have already seen, was the empty location

49
00:02:41.4 --> 00:02:48.1
right before "a". Let's hit ENTER and... yes, the match is at the

50
00:02:48.1 --> 00:02:51.1
beginning of the string, and it is an empty string.

51
00:02:52.3 --> 00:03:02.9
Now if we use "\d+", we get the match that we expect, "123".

52
00:03:03.5 --> 00:03:05.8
Let's have a look at the R code.

53
00:03:06.1 --> 00:03:10.8
So we are using the 'stringr' library here, we use the same

54
00:03:10.8 --> 00:03:15.2
"abc123" string, and we use the 'str_extract'

55
00:03:15.2 --> 00:03:17.5
function from the 'stringr' library.

56
00:03:17.8 --> 00:03:25.1
So in this case the pattern is "\d*", and it

57
00:03:25.2 --> 00:03:29.7
extracts the empty string at the beginning, just as expected.

58
00:03:30.2 --> 00:03:35.7
And if we use 'str_extract_all' to extract all occurrences,

59
00:03:35.9 --> 00:03:37.8
you'll see a lot of empty strings.

60
00:03:37.8 --> 00:03:42.1
Look, the first empty string comes from the beginning of the

61
00:03:42.1 --> 00:03:45.8
string. The second empty string comes from the location between

62
00:03:45.8 --> 00:03:46.3
"a" and "b".

63
00:03:46.9 --> 00:03:50.0
This empty string is an empty space between "b" and "c".

64
00:03:50.8 --> 00:03:58.0
Then we matched "123", and the last empty string comes

65
00:03:58.0 --> 00:03:59.4
from the end of the string.

66
00:04:00.1 --> 00:04:06.7
The same behavior is observed in Python.

67
00:04:06.7 --> 00:04:11.9
So let's repeat: always use the pattern that matches at least one character

68
00:04:11.9 --> 00:04:15.4
if you do not want to have empty matches in your results.

69
00:04:15.6 --> 00:04:18.9
You can learn more about this issue if you follow the links

70
00:04:19.0 --> 00:04:20.1
in the FURTHER LINKS section.

71
00:04:20.2 --> 00:04:22.9
If you liked my video, please click "Like" and subscribe to

72
00:04:22.9 --> 00:04:25.6
my channel if you haven't done it yet. Thank you for watching

73
00:04:25.6 --> 00:04:27.3
and happy regexing.
